using System;
using System.Collections;
using System.IO;

namespace EaseFile
{
    public class EaseFileBase
    {
        protected FileStream КонечныйФайлДляЗаписи;
        protected Dictionary<string, long[]> СписокИдификаторовИПозицийВФайле;
        protected КЭШ ПромежуточныйКЭШ;

        public EaseFileBase(string GetPathFile)
        {
            СписокИдификаторовИПозицийВФайле = new Dictionary<string, long[]>();
            this.ПромежуточныйКЭШ = new КЭШ();
            if (File.Exists(GetPathFile))
            {
                КонечныйФайлДляЗаписи = new FileStream(GetPathFile, FileMode.Open);
                byte[] БайтыГдеХранятьсяФайлы = new byte[104857600];
                КонечныйФайлДляЗаписи.Read(БайтыГдеХранятьсяФайлы, 0, 104857600);
                string[] ЧерновойСписокФайлов = System.Text.UTF8Encoding.UTF8.GetString(БайтыГдеХранятьсяФайлы).Split('\n');
                for (int shag = 0; shag <= ЧерновойСписокФайлов.Length - 1; shag++)
                {
                    if (ЧерновойСписокФайлов[shag].Split(' ').Length == 3)
                    {
                        Console.WriteLine(DateTime.Now.ToString() + " " + ЧерновойСписокФайлов[shag]);
                        СписокИдификаторовИПозицийВФайле.Add(ЧерновойСписокФайлов[shag].Split(' ')[0], new long[] { Convert.ToInt64(ЧерновойСписокФайлов[shag].Split(' ')[1]), Convert.ToInt64(ЧерновойСписокФайлов[shag].Split(' ')[2]) });
                    }
                }
            }
            else
            {
                КонечныйФайлДляЗаписи = new FileStream(GetPathFile, FileMode.Create);
                КонечныйФайлДляЗаписи.Write(new ReadOnlySpan<byte>(new byte[104857600]));

            }


        }

        public byte[] СчитатьДанные(string ИндификаторДляСчитывания)
        {
            if (ПоискУникальныхИдентификаторов(ИндификаторДляСчитывания))
            {
                byte[] ДанныеСчитанныеИЗКЭШа = this.ПромежуточныйКЭШ.СчитатьДанные(ИндификаторДляСчитывания);
                if (ДанныеСчитанныеИЗКЭШа == null)
                {
                    int РазмерСчитываемогоФайла = System.Convert.ToInt32(this.СписокИдификаторовИПозицийВФайле[ИндификаторДляСчитывания][1] - this.СписокИдификаторовИПозицийВФайле[ИндификаторДляСчитывания][0]);
                    Span<byte> ВременныйКЭШ = new Span<byte>(new byte[РазмерСчитываемогоФайла]);
                    this.КонечныйФайлДляЗаписи.Position = this.СписокИдификаторовИПозицийВФайле[ИндификаторДляСчитывания][0];
                    this.КонечныйФайлДляЗаписи.Read(ВременныйКЭШ);
                    this.КонечныйФайлДляЗаписи.Position = this.КонечныйФайлДляЗаписи.Length;
                    ПромежуточныйКЭШ.ЗаписьДанных(ИндификаторДляСчитывания, ВременныйКЭШ.ToArray());
                    
                    return ВременныйКЭШ.ToArray();
                }
                else
                {
       
                    return ДанныеСчитанныеИЗКЭШа;
                }

            }
            return null;
        }

        public bool ПерезаписатьДанные(string ИмяПолученногоИндификатора, byte[] ДанныеКоторыеНужноПерезаписать)
        {
            if (ПоискУникальныхИдентификаторов(ИмяПолученногоИндификатора))
            {
                УдалитьДанные(ИмяПолученногоИндификатора);
                ЗаписьДанных(ИмяПолученногоИндификатора, ДанныеКоторыеНужноПерезаписать);
                return true;
            }
            return false;
        }
        public bool ЗаписьДанных(string ПолученыйИндификаторДляПоиска, byte[] ПолученныеДанные)
        {
            if (!ПоискУникальныхИдентификаторов(ПолученыйИндификаторДляПоиска))
            {
                long ПозицияДляНачалаЗаписиВПотоке = ПоискСвободныхОбластей(ПолученныеДанные.Length - 1);
                this.КонечныйФайлДляЗаписи.Position = ПозицияДляНачалаЗаписиВПотоке;
                this.КонечныйФайлДляЗаписи.Write(new ReadOnlySpan<byte>(ПолученныеДанные));
                this.СписокИдификаторовИПозицийВФайле.Add(ПолученыйИндификаторДляПоиска, new long[] { ПозицияДляНачалаЗаписиВПотоке, this.КонечныйФайлДляЗаписи.Position });
               
                СохранитьСписокФайловВПоток();
                return true;
            }
            return false;
        }

        public string[] ЗапроситьСписокИндификаторов()
        {
            return СписокИдификаторовИПозицийВФайле.Keys.ToArray();
        }

        public bool ПереименоватьИндификатор(string ИмяИсходногоИндификатора, string НовоеИмяИндификатора)
        {
            if (ПоискУникальныхИдентификаторов(ИмяИсходногоИндификатора) & !ПоискУникальныхИдентификаторов(НовоеИмяИндификатора))
            {
                long[] ВерменноеХралилищеДанных = СписокИдификаторовИПозицийВФайле[ИмяИсходногоИндификатора];
                СписокИдификаторовИПозицийВФайле.Remove(ИмяИсходногоИндификатора);
                СписокИдификаторовИПозицийВФайле.Add(НовоеИмяИндификатора, ВерменноеХралилищеДанных);
                СохранитьСписокФайловВПоток();
                ПромежуточныйКЭШ.УдалитьДанные(ИмяИсходногоИндификатора);
                return true;
            }
            return false;

        }
        public void УдалитьДанные(string ПолученныйИндификаторДляУдаления)
        {
            if (ПоискУникальныхИдентификаторов(ПолученныйИндификаторДляУдаления))
            {
                this.КонечныйФайлДляЗаписи.Position = this.СписокИдификаторовИПозицийВФайле[ПолученныйИндификаторДляУдаления][0];
                this.КонечныйФайлДляЗаписи.Write(new byte[this.СписокИдификаторовИПозицийВФайле[ПолученныйИндификаторДляУдаления][1] - this.СписокИдификаторовИПозицийВФайле[ПолученныйИндификаторДляУдаления][0]]);
                this.СписокИдификаторовИПозицийВФайле.Remove(ПолученныйИндификаторДляУдаления);
                this.КонечныйФайлДляЗаписи.Position = this.КонечныйФайлДляЗаписи.Length;
                ПромежуточныйКЭШ.УдалитьДанные(ПолученныйИндификаторДляУдаления);
                this.СохранитьСписокФайловВПоток();
            }
        }
        public long ПоискСвободныхОбластей(int ПолученныйРазмерЗаписываемыхДанных)
        {
            if (this.СписокИдификаторовИПозицийВФайле.Count >= 1)
            {
                string[] СписокКлючей = this.СписокИдификаторовИПозицийВФайле.Keys.ToArray();
                for (int shag = 0; shag <= СписокИдификаторовИПозицийВФайле.Count - 2; shag++)
                {
                    if (this.СписокИдификаторовИПозицийВФайле[СписокКлючей[shag + 1]][0] - this.СписокИдификаторовИПозицийВФайле[СписокКлючей[shag]][1] >= ПолученныйРазмерЗаписываемыхДанных)
                    {
                        Console.WriteLine("Dev: " + this.СписокИдификаторовИПозицийВФайле[СписокКлючей[shag]][1] + 1);
                        return this.СписокИдификаторовИПозицийВФайле[СписокКлючей[shag]][1] + 1;
                    }
                }
            }
            return this.КонечныйФайлДляЗаписи.Length + 1;
        }

        public void СохранитьСписокФайловВПоток()
        {
            this.КонечныйФайлДляЗаписи.Position = 0;
            this.КонечныйФайлДляЗаписи.Write(new ReadOnlySpan<byte>(new byte[104857600]));
            this.КонечныйФайлДляЗаписи.Position = 0;
            if (this.СписокИдификаторовИПозицийВФайле.Count >= 1)
            {
                string[] СписокКлючей = this.СписокИдификаторовИПозицийВФайле.Keys.ToArray();
                for (int shag = 0; shag <= СписокИдификаторовИПозицийВФайле.Count - 1; shag++)
                {
                    
                    this.КонечныйФайлДляЗаписи.Write(new ReadOnlySpan<byte>(КонвертированиеСтрокиВБайты(СписокКлючей[shag] + ' ' + this.СписокИдификаторовИПозицийВФайле[СписокКлючей[shag]][0] + ' ' + this.СписокИдификаторовИПозицийВФайле[СписокКлючей[shag]][1] + '\n')));
                }
            }
            else
            {
                this.КонечныйФайлДляЗаписи.Write(new Span<byte>(new byte[104857600]));
            }
            this.КонечныйФайлДляЗаписи.Position = this.КонечныйФайлДляЗаписи.Length;
        }
        public byte[] КонвертированиеСтрокиВБайты(string ПолученнаяСтрока)
        {
            return System.Text.UTF8Encoding.UTF8.GetBytes(ПолученнаяСтрока);
        }
        public bool ПоискУникальныхИдентификаторов(string ПолученыйИндификаторДляПоиска)
        {
            return СписокИдификаторовИПозицийВФайле.ContainsKey(ПолученыйИндификаторДляПоиска);
        }
    }
}