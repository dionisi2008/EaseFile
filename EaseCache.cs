using System;
using System.IO;

namespace EaseFile
{
    public class КЭШ
    {
        protected MemoryStream ОбластьВПамятиПодКЭШ;
        protected Dictionary<string, long[]> СписокИдификаторовИПозицийВПамяти;


        public КЭШ(int РазмерКэшаВПамяти = 1073741824)
        {
            СписокИдификаторовИПозицийВПамяти = new Dictionary<string, long[]>();
            ОбластьВПамятиПодКЭШ = new MemoryStream(new byte[РазмерКэшаВПамяти]);

        }

        public byte[] СчитатьДанные(string ИндификаторДляСчитывания)
        {
            if (ПоискУникальныхИдентификаторов(ИндификаторДляСчитывания))
            {
                int КразмерСчитываемогоФайла = System.Convert.ToInt32(this.СписокИдификаторовИПозицийВПамяти[ИндификаторДляСчитывания][1] - this.СписокИдификаторовИПозицийВПамяти[ИндификаторДляСчитывания][0]);
                Span<byte> test = new Span<byte>(new byte[КразмерСчитываемогоФайла]);
                this.ОбластьВПамятиПодКЭШ.Position = this.СписокИдификаторовИПозицийВПамяти[ИндификаторДляСчитывания][0];
                this.ОбластьВПамятиПодКЭШ.Read(test);
                // this.ОбластьВПамятиПодКЭШ.Position = this.ОбластьВПамятиПодКЭШ.Length;
                this.СписокИдификаторовИПозицийВПамяти[ИндификаторДляСчитывания][2]++;
                return test.ToArray();
            }
            return null;
        }

        public void РевизияПамяти()
        {
            string[] ВыгруженныйСписокКлючей = СписокИдификаторовИПозицийВПамяти.Keys.ToArray();
            long РейтингНаимениеПопулярногоИндификатора = 1000;
            int НомерНаимениеПопулярногоИндификатора = 0;
            for (int shag = 0; shag <= ВыгруженныйСписокКлючей.Length - 1; shag++)
            {
                if (this.СписокИдификаторовИПозицийВПамяти[ВыгруженныйСписокКлючей[shag]][2] > 10 & this.СписокИдификаторовИПозицийВПамяти[ВыгруженныйСписокКлючей[shag]][2] < РейтингНаимениеПопулярногоИндификатора)
                {
                    НомерНаимениеПопулярногоИндификатора = shag;
                    РейтингНаимениеПопулярногоИндификатора = this.СписокИдификаторовИПозицийВПамяти[ВыгруженныйСписокКлючей[shag]][2];
                }
            }
        }

        public bool ПерезаписатьДанные(string ИмяПолученногоИндификатора, byte[] ДанныеКоторыеНужноПерезаписать)
        {
            if (ПоискУникальныхИдентификаторов(ИмяПолученногоИндификатора))
            {
                УдалитьДанные(ИмяПолученногоИндификатора);
                ЗаписьДанных(ИмяПолученногоИндификатора, ДанныеКоторыеНужноПерезаписать);
                return true;
            }
            return false;
        }
        public bool ЗаписьДанных(string ПолученыйИндификаторДляПоиска, byte[] ПолученныеДанные)
        {
            РевизияПамяти();
            if (!ПоискУникальныхИдентификаторов(ПолученыйИндификаторДляПоиска))
            {
                long ПозицияДляНачалаЗаписиВПотоке = ПоискСвободныхОбластей(ПолученныеДанные.Length - 1);
                if (ПозицияДляНачалаЗаписиВПотоке != 0)
                {
                    this.ОбластьВПамятиПодКЭШ.Position = ПозицияДляНачалаЗаписиВПотоке;
                    this.ОбластьВПамятиПодКЭШ.Write(new ReadOnlySpan<byte>(ПолученныеДанные));
                    this.СписокИдификаторовИПозицийВПамяти.Add(ПолученыйИндификаторДляПоиска, new long[] { ПозицияДляНачалаЗаписиВПотоке, this.ОбластьВПамятиПодКЭШ.Position, 0 });
                    return true;
                }
                else
                {
                    return false;
                }

                return true;
            }
            return false;
        }

        public string[] ЗапроситьСписокИндификаторов()
        {
            return СписокИдификаторовИПозицийВПамяти.Keys.ToArray();
        }

        public bool ПереименоватьИндификатор(string ИмяИсходногоИндификатора, string НовоеИмяИндификатора)
        {
            if (ПоискУникальныхИдентификаторов(ИмяИсходногоИндификатора) & !ПоискУникальныхИдентификаторов(НовоеИмяИндификатора))
            {
                long[] ВерменноеХралилищеДанных = СписокИдификаторовИПозицийВПамяти[ИмяИсходногоИндификатора];
                СписокИдификаторовИПозицийВПамяти.Remove(ИмяИсходногоИндификатора);
                СписокИдификаторовИПозицийВПамяти.Add(НовоеИмяИндификатора, ВерменноеХралилищеДанных);
                return true;
            }
            return false;

        }
        public void УдалитьДанные(string ПолученныйИндификаторДляУдаления)
        {
            if (ПоискУникальныхИдентификаторов(ПолученныйИндификаторДляУдаления))
            {
                this.ОбластьВПамятиПодКЭШ.Position = this.СписокИдификаторовИПозицийВПамяти[ПолученныйИндификаторДляУдаления][0];
                this.ОбластьВПамятиПодКЭШ.Write(new byte[this.СписокИдификаторовИПозицийВПамяти[ПолученныйИндификаторДляУдаления][1] - this.СписокИдификаторовИПозицийВПамяти[ПолученныйИндификаторДляУдаления][0]]);
                this.СписокИдификаторовИПозицийВПамяти.Remove(ПолученныйИндификаторДляУдаления);
                // this.ОбластьВПамятиПодКЭШ.Position = this.ОбластьВПамятиПодКЭШ.Length;
            }
        }
        public long ПоискСвободныхОбластей(int ПолученныйРазмерЗаписываемыхДанных)
        {
            if (this.СписокИдификаторовИПозицийВПамяти.Count >= 2)
            {
                string[] СписокКлючей = this.СписокИдификаторовИПозицийВПамяти.Keys.ToArray();
                for (int shag = 0; shag <= СписокИдификаторовИПозицийВПамяти.Count - 2; shag++)
                {
                    if (this.СписокИдификаторовИПозицийВПамяти[СписокКлючей[shag + 1]][0] - this.СписокИдификаторовИПозицийВПамяти[СписокКлючей[shag]][1] >= ПолученныйРазмерЗаписываемыхДанных)
                    {
                        Console.WriteLine("Dev: " + this.СписокИдификаторовИПозицийВПамяти[СписокКлючей[shag]][1] + 1);
                        return this.СписокИдификаторовИПозицийВПамяти[СписокКлючей[shag]][1] + 1;
                    }
                }
            }
            if (((this.ОбластьВПамятиПодКЭШ.Length - 1) - this.ОбластьВПамятиПодКЭШ.Position) >= ПолученныйРазмерЗаписываемыхДанных)
            {
                return this.ОбластьВПамятиПодКЭШ.Position + 1;
            }
            else
            {
                return 0;
            }

        }

        public byte[] КонвертированиеСтрокиВБайты(string ПолученнаяСтрока)
        {
            return System.Text.UTF8Encoding.UTF8.GetBytes(ПолученнаяСтрока);
        }
        public bool ПоискУникальныхИдентификаторов(string ПолученыйИндификаторДляПоиска)
        {
            return СписокИдификаторовИПозицийВПамяти.ContainsKey(ПолученыйИндификаторДляПоиска);
        }
    }
}